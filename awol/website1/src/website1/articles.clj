(ns website1.articles  (:require    [hiccup.core :as hc]    [hiccup.page :as hp]    [clojure.string :as cs]    [clojure.edn :as edn]))(def links  (list [:link {:href "/css/foundationmock.css", :type "text/css", :rel "stylesheet"}         [:link {:href "/css/stylemock.css", :type "text/css", :rel "stylesheet"}]]        [:link {:type "text/css", :rel "stylesheet", :href "https://fonts.googleapis.com/css?family=Poiret+One"}]        [:link {:type "text/css", :rel "stylesheet", :href "https://fonts.googleapis.com/css?family=Montserrat:400"}]))(defn articles []  (->> (slurp (str "resources/public/articles.edn"))       (edn/read-string)))(defn taketitle [id]  (get-in (articles) [(dec id) :title]))(defn taketext [id]  (get-in (articles) [(dec id) :text]))(defn article [id]  (->> (filter #(= (:id %) (str id)) (articles)) (first)))(defn makelist  ([data num] (makelist data num []))  ([data num ans] (if (empty? data) ans                                    (recur (rest data) (rest num) (concat ans                                                                          [[:li [:a {:class "tombol", :href (str "/" (first num))} (first data)]]])))))(defn open  ([] (let [list (->> (articles) (map #(get % :title)))            no (->> (articles) (map #(get % :id)))]        (hp/html5 [:head links]                  [:body                   [:div {:class "row"}                    [:div {:class "large-12 columns headlines"}                     [:div {:class "headlines"} "COOL ARTICLES"]]]                   [:div {:style "list-style-type:disc"}                    (makelist list no)]                   [:div {:class "footer2"}                    [:div {:class "row"}                     [:div {:class "large-12 columns"} " "                      [:h6 "Copyright stuffs."] " "]]]])))  ([id] (hp/html5 [:head links]                  [:body                   [:div {:class "row"}                    [:div {:class "large-12 columns headlines"}                     [:div {:class "headlines"} (:title (article id))]]]                   [:div {:class "row"}                    [:a {:class "tombol", :href "#"} (:text (article id))]]                   [:div {:class "footer2"}                    [:div {:class "row"}                     [:div {:class "large-12 columns"} " "                      [:h6 "Copyright stuffs."] " "]]]])))(defn addnew  [{:keys [title content]}]  (->> {:id    (str (inc (edn/read-string (:id (last (articles)))))),        :title (str title),        :text  (str content)}       (conj (articles))       (spit "resources/public/articles.edn")))(defn new []  (hp/html5 [:head links]            [:body             [:div {:class "row"}              [:div {:class "large-12 columns headlines"}               "ADD NEW ARTICLE"]]             [:form {:action "/add" :method "post"}              [:div {:class "row"}               [:div {:class "large-12 columns" :style "padding-bottom: 2rem;"}                [:label "Title"                 [:input {:type "text", :name "title", :placeholder "Article's title"}]]]]              [:div {:class "row"}               [:div {:class "large-12 columns"}                [:label "Content"                 [:input {:type "text", :name "text", :placeholder "Article's Content"}]]]]              [:div {:class "row"}               [:input {:type "submit", :class "tombol right"}]]]             [:div {:class "footer2"}              [:div {:class "row"}               [:div {:class "large-12 columns"} " "                [:h6 "Copyright stuffs."] " "]]]]))